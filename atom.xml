<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zunpeng&#39;s wiki</title>
  
  <subtitle>知识不能碎片化，要结构化</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://192.168.0.107:4000/"/>
  <updated>2020-03-23T05:24:53.060Z</updated>
  <id>http://192.168.0.107:4000/</id>
  
  <author>
    <name>zunpeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webhook</title>
    <link href="http://192.168.0.107:4000/wiki/%E4%B8%AA%E4%BA%BAWiki%E6%90%AD%E5%BB%BA/webhook/"/>
    <id>http://192.168.0.107:4000/wiki/个人Wiki搭建/webhook/</id>
    <published>2020-03-23T01:42:00.000Z</published>
    <updated>2020-03-23T05:24:53.060Z</updated>
    
    <content type="html"><![CDATA[<p><code>git clone https://github.com/dounine/github-webhook.git</code></p><p>修改hook.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</span><br><span class="line"><span class="keyword">var</span> secretPassword = <span class="string">'abc123'</span> <span class="comment">//github secret安全密码</span></span><br><span class="line"><span class="comment">// webhook为gitbucket中url后的路径</span></span><br><span class="line"><span class="keyword">var</span> handler = createHandler(&#123;<span class="attr">path</span>: <span class="string">'/webhook'</span>, <span class="attr">secret</span>: secretPassword&#125;)</span><br><span class="line"><span class="keyword">var</span> cmd = <span class="built_in">require</span>(<span class="string">'node-cmd'</span>)</span><br><span class="line"><span class="comment">// webhook服务端口</span></span><br><span class="line"><span class="keyword">var</span> port = <span class="number">8083</span></span><br><span class="line"><span class="keyword">var</span> bash = <span class="string">'/opt/app/wiki/gitbucket-pull.sh'</span> <span class="comment">//执行的脚本</span></span><br><span class="line"> </span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-type'</span>: <span class="string">'application/json'</span>&#125;)</span><br><span class="line">        <span class="keyword">var</span> msg = <span class="string">'&#123;"code":404,"msg":"没有这个地扯"&#125;'</span></span><br><span class="line">        res.end(msg)</span><br><span class="line">        <span class="built_in">console</span>.log(msg)</span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;).listen(port, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Github Hook Server running at http://0.0.0.0:"</span> + port + <span class="string">"/webhook"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'错误:'</span>, err.message)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">        event.payload.repository.name,</span><br><span class="line">        event.payload.ref)</span><br><span class="line">    cmd.get(bash, <span class="function"><span class="keyword">function</span> (<span class="params">err, data, stderr</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">if</span> (stderr) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"脚本错误:"</span> + stderr)</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">handler.on(<span class="string">'issues'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Received an issue event for %s action=%s: #%d %s'</span>,</span><br><span class="line">        event.payload.repository.name,</span><br><span class="line">        event.payload.action,</span><br><span class="line">        event.payload.issue.number,</span><br><span class="line">        event.payload.issue.title)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：需要根据git操作，预先对git工作目录进行手动pull一次，设置相关远程路径之类</p><p><strong>gitbucket-pull.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> `date` &gt;&gt; test.log</span></span><br><span class="line">cd /opt/app/wiki</span><br><span class="line">git pull wiki master</span><br></pre></td></tr></table></figure><h3 id="webhook启动"><a href="#webhook启动" class="headerlink" title="webhook启动"></a>webhook启动</h3><p><code>cd $WEBHOOK_HOME &amp;&amp; ./start.sh</code></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://www.jianshu.com/p/4e0dfc5cfb17" rel="external nofollow noopener noreferrer" target="_blank">git-Webhook让部署自动化</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;git clone https://github.com/dounine/github-webhook.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改hook.js&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="个人Wiki搭建" scheme="http://192.168.0.107:4000/categories/%E4%B8%AA%E4%BA%BAWiki%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Git基本操作</title>
    <link href="http://192.168.0.107:4000/wiki/Git/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://192.168.0.107:4000/wiki/Git/Git基本操作/</id>
    <published>2020-03-22T07:57:09.000Z</published>
    <updated>2020-03-23T05:24:53.060Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初始化版本库"><a href="#初始化版本库" class="headerlink" title="初始化版本库"></a>初始化版本库</h4><p><code>git init</code></p><h4 id="添加文件到版本库（只是添加到缓存区），-代表添加文件夹下所有文件"><a href="#添加文件到版本库（只是添加到缓存区），-代表添加文件夹下所有文件" class="headerlink" title="添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件"></a>添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件</h4><p><code>git add .</code></p><h4 id="把添加的文件提交到版本库，并填写提交备注"><a href="#把添加的文件提交到版本库，并填写提交备注" class="headerlink" title="把添加的文件提交到版本库，并填写提交备注"></a>把添加的文件提交到版本库，并填写提交备注</h4><p><code>git commit -m &quot;first commit&quot;</code></p><hr><p>到目前为止，我们完成了代码库的初始化，但代码是在本地，还没有提交到远程服务器，所以关键的来了，要提交到就远程代码服务器，进行以下两步：</p><h4 id="把本地库与远程库关联"><a href="#把本地库与远程库关联" class="headerlink" title="把本地库与远程库关联"></a>把本地库与远程库关联</h4><p><code>git remote add origin 你的远程库地址</code></p><p><code>例如：git remote add wiki http://192.168.0.107:8809/git/zunpeng/wiki-site.git 此处的wiki与origin是一个意思，只是命名不一样而已</code></p><p><code>git remote 可以查看当前目录已关联的git仓库</code></p><h4 id="第一次推送时"><a href="#第一次推送时" class="headerlink" title="第一次推送时"></a>第一次推送时</h4><p><code>git push -u origin master</code></p><h4 id="第一次推送后，直接使用该命令即可推送修改"><a href="#第一次推送后，直接使用该命令即可推送修改" class="headerlink" title="第一次推送后，直接使用该命令即可推送修改"></a>第一次推送后，直接使用该命令即可推送修改</h4><p><code>git push origin master</code></p><h4 id="强制推送，有时可能上面两个推送命令不好用，可能会需要用到（慎用）"><a href="#强制推送，有时可能上面两个推送命令不好用，可能会需要用到（慎用）" class="headerlink" title="强制推送，有时可能上面两个推送命令不好用，可能会需要用到（慎用）"></a>强制推送，有时可能上面两个推送命令不好用，可能会需要用到（慎用）</h4><p><code>git push -f origin master</code></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="Git如何把本地代码推送到远程仓库">://blog.csdn.net/JackLiu16/article/details/79751900</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;初始化版本库&quot;&gt;&lt;a href=&quot;#初始化版本库&quot; class=&quot;headerlink&quot; title=&quot;初始化版本库&quot;&gt;&lt;/a&gt;初始化版本库&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;添加文件到版本库（只是添加到缓存区），-
      
    
    </summary>
    
      <category term="Git" scheme="http://192.168.0.107:4000/categories/Git/"/>
    
    
      <category term="Git" scheme="http://192.168.0.107:4000/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo操作命令</title>
    <link href="http://192.168.0.107:4000/wiki/Hexo/Hexo%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://192.168.0.107:4000/wiki/Hexo/Hexo操作命令/</id>
    <published>2020-03-22T05:05:19.000Z</published>
    <updated>2020-03-23T05:24:53.060Z</updated>
    
    <content type="html"><![CDATA[<h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p><code>$ hexo init [folder]</code><br>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p><code>$ hexo new [layout] &lt;title&gt;</code><br>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用_config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><p><code>$ hexo new &quot;post title with whitespace&quot;</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-p, --path</td><td>自定义新文章的路径</td></tr><tr><td>-r, --replace</td><td>如果存在同名文章，将其替换</td></tr><tr><td>-s, --slug</td><td>文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://hexo.io/zh-cn/docs/commands" title="Hexo文档" rel="external nofollow noopener noreferrer" target="_blank">Hexo文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;init&quot;&gt;&lt;a href=&quot;#init&quot; class=&quot;headerlink&quot; title=&quot;init&quot;&gt;&lt;/a&gt;init&lt;/h3&gt;&lt;p&gt;&lt;code&gt;$ hexo init [folder]&lt;/code&gt;&lt;br&gt;新建一个网站。如果没有设置 folder ，Hex
      
    
    </summary>
    
      <category term="Hexo" scheme="http://192.168.0.107:4000/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>前言</title>
    <link href="http://192.168.0.107:4000/wiki/Go%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/%E5%89%8D%E8%A8%80/"/>
    <id>http://192.168.0.107:4000/wiki/Go入门指南/前言/</id>
    <published>2020-03-21T14:32:00.000Z</published>
    <updated>2020-03-23T05:24:53.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="用更少的代码，更短的编译时间，创建运行更快的程序，享受更多的乐趣"><a href="#用更少的代码，更短的编译时间，创建运行更快的程序，享受更多的乐趣" class="headerlink" title="用更少的代码，更短的编译时间，创建运行更快的程序，享受更多的乐趣"></a>用更少的代码，更短的编译时间，创建运行更快的程序，享受更多的乐趣</h3><p>对于学习 Go 编程语言的爱好者来说，这本书无疑是最适合你的一本书籍，这里包含了当前最全面的学习资源。本书通过对官方的在线文档、名人博客、书籍、相关文章以及演讲的资料收集和整理，并结合我自身在软件工程、编程语言和数据库开发的授课经验，将这些零碎的知识点组织成系统化的概念和技术分类来进行讲解。</p><p>随着软件规模的不断扩大，诸多的学者和谷歌的开发者们在公司内部的软件开发过程中开始经历大量的挫折，在诸多问题上都不能给出令人满意的解决方案，尤其是在使用 C++ 来开发大型的服务端软件时，情况更是不容乐观。由于二进制文件一般都是非常巨大的，因此需要耗费大量的时间在编译这些文件上，同时编程语言的设计思想也已经非常陈旧，这些情况都充分证明了现有的编程语言已不符合时下的生产环境。尽管硬件在过去的几十年中有了飞速的发展，但人们依旧没有找到机会去改变 C++ 在软件开发的重要地位，并在实际开发过程中忍受着它所带来的令人头疼的一些问题。因此学者们坐下来总结出了现在生产环境与软件开发之间的主要矛盾，v。</p><p>以下就是他们讨论得出的对编程语言的设计要求：</p><ul><li>能够以更快的速度开发软件</li><li>开发出的软件能够很好地在现代的多核计算机上工作</li><li>开发出的软件能够很好地在网络环境下工作</li><li>使人们能够享受软件开发的过程</li></ul><p>Go 语言就在这样的环境下诞生了，它让人感觉像是 Python 或 Ruby 这样的动态语言，但却又拥有像 C 或者 Java 这类语言的高性能和安全性。</p><p>Go 语言出现的目的是希望在编程领域创造最实用的方式来进行软件开发。它并不是要用奇怪的语法和晦涩难懂的概念来从根本上推翻已有的编程语言，而是建立并改善了 C、Java、C# 中的许多语法风格。它提倡通过接口来针对面向对象编程，通过 goroutine 和 channel 来支持并发和并行编程。</p><p>这本书是为那些想要学习 Go 这门全新的，迷人的和充满希望的编程语言的开发者量身定做的。当然，你在学习 Go 语言之前需要具备一些关于编程的基础知识和经验，并且拥有合适的学习环境，但你并不需要对 C 或者 Java 或其它类似的语言有非常深入的了解。</p><p>对于那些熟悉 C 或者面向对象编程语言的开发者，我们将会在本书中用 Go 和一些编程语言的相关概念进行比较（书中会使用大家所熟知的缩写 “OO” 来表示面向对象）。</p><p>本书将会从最基础的概念讲起，同时也会讨论一些类似在应用 goroutine 和 channel 时有多少种不同的模式，如何在 Go 语言中使用谷歌 API，如何操作内存，如何在 Go 语言中进行程序测试和如何使用模板来开发 Web 应用这些高级概念和技巧。</p><p>在本书的第一部分，我们将会讨论 Go 语言的起源（第 1 章），以及如何安装 Go 语言（第 2 章）和开发环境（第 3 章）。</p><p>在本书的第二部分，我们将会带领你贯穿 Go 语言的核心思想，譬如简单与复杂类型（第 4、7、8 章），控制结构（第 5 章），函数（第 6 章），结构与方法（第 10 章）和接口（第 11 章）。我们会对 Go 语言的函数式和面向对象编程进行透彻的讲解，包括如何使用 Go 语言来构造大型项目（第 9 章）。</p><p>在本书的第三部分，你将会学习到如何处理不同格式的文件（第 12 章）和如何在 Go 语言中巧妙地使用错误处理机制（第 13 章）。然后我们会对 Go 语言中最值得称赞的设计 goroutine 和 channel 进行并发和多核应用的基本技巧的讲解（第 14 章）。最后，我们会讨论如何将 Go 语言应用到分布式和 Web 应用中的相关网络技巧（第 15 章）。</p><p>我们会在本书的第四部分向你展示许多 Go 语言的开发模式和一些编码规范，以及一些非常有用的代码片段（第 18 章）。在前面章节完成对所有的 Go 语言技巧的学习之后，你将会学习如何构造一个完整 Go 语言项目（第 19 章），然后我们会介绍一些关于 Go 语言在云（Google App Engine）方面的应用（第 20 章）。在本书的最后一章（第 21 章），我们会讨论一些在全世界范围内已经将 Go 语言投入实际开发的公司和组织。本书将会在最后给出一些对 Go 语言爱好者的引用，Go 相关包和工具的参考，以及章节练习的答案和所有参考资源和文献的清单。</p><p>Go 语言有一个被称之为 “没有废物” 的宗旨，就是将一切没有必要的东西都去掉，不能去掉的就无底线地简化，同时追求最大程度的自动化。他完美地诠释了敏捷编程的 KISS 秘诀：短小精悍！</p><p>Go 语言通过改善或去除在 C、C++ 或 Java 中的一些所谓“开放”特性来让开发者们的工作更加便利。这里只举例其中的几个，比如对于变量的默认初始化，内存分配与自动回收，以及更简洁却不失健壮的控制结构。同时我们也会发现 Go 语言旨在减少不必要的编码工作，这使得 Go 语言的代码更加简洁，从而比传统的面向对象语言更容易阅读和理解。</p><p>与 C++ 或 Java 这些有着庞大体系的语言相比，Go 语言简洁到可以将它整个的装入你的大脑中，而且比学习 Scala（Java 的并发语言）有更低的门槛，真可谓是 21 世纪的 C 语言！</p><p>作为一门系统编程语言，你不应该为 Go 语言的大多数代码示例和练习都和控制台有着密不可分的关系而感到惊奇，因为提供平台依赖性的 GUI（用户界面）框架并不是一个简单的任务。有许多由第三方发起的 GUI 框架项目正在如火如荼地进行中，或许我们会在不久的将来看到一些可用的 Go 语言 GUI 框架。不过现阶段的 Go 语言已经提供了大量有关 Web 方面的功能，我们可以通过它强大的 http 和 template 包来达到 Web 应用的 GUI 实现。</p><p>我们会经常涉及到一些关于 Go 语言的编码规范，了解和使用这些已经被广泛认同的规范应该是你学习阶段最重要的实践。我会在书中尽量使用已经讲解的概念或者技巧来解释相关的代码示例，以避免你在不了解某些高级概念的情况下而感到迷茫。</p><p>我们通过 227 个完整的代码示例和书中的解释说明来对所有涉及到的概念和技巧进行彻底的讲解，你可以下载这些代码到你的电脑上运行，从而加深对概念的理解。</p><p>本书会尽可能地将前后章节的内容联系起来，当然这也同时要求你通过学习不同的知识来对一个问题提出尽可能多的解决方案。记住，学习一门新语言的最佳方式就是实践，运行它的代码，修改并尝试更多的方案。因此，你绝对不可以忽略书中的 130 个代码练习，这将对你学习好 Go 语言有很大的帮助。比如，我们就为斐波那契算法提供了 13 个不同的版本，而这些版本都使用了不同的概念和技巧。</p><p>你可以通过访问本书的 官方网站 下载书中的代码（译者注：所有代码文件已经包括在 GitHub 仓库中），并获得有关本书的勘误情况和内容更新。</p><p>为了让你在成为 Go 语言大师的道路上更加顺利，我们会专注于一些特别的章节以提供 Go 语言开发模式的最佳实践，同时也会帮助初学者逃离一些语言的陷阱。第 18 章可以作为你在开发时的一个参考手册，因为当中包含了众多的有价值的代码片段以及相关的解释说明。</p><p>最后要说明的是，你可以通过完整的索引来快速定位你需要阅读的章节。书中所有的代码都在 Go1.4 版本下测试通过。</p><p>这里有一段来自在 C++、Java 和 Python 领域众所周知的专家 Bruce Eckel 的评论：</p><p>“作为一个有着 C/C++ 背景的开发者，我在使用 Go 语言时仿佛呼吸到了新鲜空气一般，令人心旷神怡。我认为使用 Go 语言进行系统编程开发比使用 C++ 有着更显著的优势，因为它在解决一些很难用 C++ 解决的问题的同时，让我的工作变得更加高效。我并不是说 C++ 的存在是一个错误，相反地，我认为这是历史发展的必然结果。当我深陷在 C 语言这门略微比汇编语言好一点的泥潭时，我坚信任何语言的构造都不可能支持大型项目的开发。像垃圾回收或并发语言支持这类东西，在当时都是极其荒谬的主意，根本没有人在乎。C++ 向大型项目开发迈出了重要的第一步，带领我们走进这个广袤无垠的世界。很庆幸 Stroustrup 做了让 C++ 兼容 C 语言以能够让其编译 C 程序这个正确的决定。我们当时需要 C++ 的出现。”</p><p>“之后我们学到了更多。我们毫无疑问地接受了垃圾回收，异常处理和虚拟机这些当年人们认为只有疯子才会想的东西。C++ 的复杂程度（新版的 C++ 甚至更加复杂）极大的影响了软件开发的高效性，这使得它再也不再适合这个时代。人们不再像过往那样认同在 C++ 中兼容使用 C 语言的方法，认为这些工作只是在浪费时间，牺牲人们的努力。就在此时，Go 语言已经成功地解决了 C++ 中那些本打算解决却未能解决的关键问题。”</p><p>我非常想要向发明这门精湛的语言的 Go 开发团队表示真挚的感谢，尤其是团队的领导者 Rob Pike、Russ Cox 和 Andrew Gerrand，他们阐述的例子和说明都非常的完美。同时，我还要感谢 Miek Gieben、Frank Muller、Ryanne Dolan 和 Satish V.J. 给予我巨大的帮助，还有那些 golang-nuts 邮件列表里的所有的成员。</p><p>欢迎来到 Go 语言开发的奇妙世界！</p><p>链接<br>目录<br>下一部分: Go 语言的起源，发展与普及</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h3 id=&quot;用更少的代码，更短的编译时间，创建运行更快的程序，享受更多的乐趣&quot;&gt;&lt;a href=&quot;#用更少的代码，更短的编译时间，创建运行更快
      
    
    </summary>
    
      <category term="Go入门指南" scheme="http://192.168.0.107:4000/categories/Go%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>目录</title>
    <link href="http://192.168.0.107:4000/wiki/Go%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/%E7%9B%AE%E5%BD%95/"/>
    <id>http://192.168.0.107:4000/wiki/Go入门指南/目录/</id>
    <published>2020-03-21T14:30:00.000Z</published>
    <updated>2020-03-23T05:24:53.056Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="intor">前言</a></li></ul><h4 id="第一部分：学习-Go-语言"><a href="#第一部分：学习-Go-语言" class="headerlink" title="第一部分：学习 Go 语言"></a>第一部分：学习 Go 语言</h4><ul><li>第1章：Go 语言的起源，发展与普及<ul><li>1.1 起源与发展</li><li>1.2 语言的主要特性与发展的环境和影响因素</li></ul></li><li>第2章：安装与运行环境<ul><li>2.1 平台与架构</li><li>2.2 Go 环境变量</li><li>2.3 在 Linux 上安装 Go</li><li>2.4 在 Mac OS X 上安装 Go</li><li>2.5 在 Windows 上安装 Go</li><li>2.6 安装目录清单</li><li>2.7 Go 运行时（runtime）</li><li>2.8 Go 解释器</li></ul></li><li>第3章：编辑器、集成开发环境与其它工具<br>3.1 Go 开发环境的基本要求<br>3.2 编辑器和集成开发环境<br>3.3 调试器<br>3.4 构建并运行 Go 程序<br>3.5 格式化代码<br>3.6 生成代码文档<br>3.7 其它工具<br>3.8 Go 性能说明<br>3.9 与其它语言进行交互</li></ul><h4 id="第二部分：语言的核心结构与技术"><a href="#第二部分：语言的核心结构与技术" class="headerlink" title="第二部分：语言的核心结构与技术"></a>第二部分：语言的核心结构与技术</h4><ul><li>第4章：基本结构和基本数据类型<br>4.1 文件名、关键字与标识符<br>4.2 Go 程序的基本结构和要素<br>4.3 常量<br>4.4 变量<br>4.5 基本类型和运算符<br>4.6 字符串<br>4.7 strings 和 strconv 包<br>4.8 时间和日期<br>4.9 指针</li><li>第5章：控制结构<br>5.1 if-else 结构<br>5.2 测试多返回值函数的错误<br>5.3 switch 结构<br>5.4 for 结构<br>5.5 Break 与 continue<br>5.6 标签与 goto</li><li>第6章：函数（function）<br>6.1 介绍<br>6.2 函数参数与返回值<br>6.3 传递变长参数<br>6.4 defer 和追踪<br>6.5 内置函数<br>6.6 递归函数<br>6.7 将函数作为参数<br>6.8 闭包<br>6.9 应用闭包：将函数作为返回值<br>6.10 使用闭包调试<br>6.11 计算函数执行时间<br>6.12 通过内存缓存来提升性能</li><li>第7章：数组与切片<br>7.1 声明和初始化<br>7.2 切片<br>7.3 For-range 结构<br>7.4 切片重组（reslice）<br>7.5 切片的复制与追加<br>7.6 字符串、数组和切片的应用</li><li>第8章：Map<br>8.1 声明、初始化和 make<br>8.2 测试键值对是否存在及删除元素<br>8.3 for-range 的配套用法<br>8.4 map 类型的切片<br>8.5 map 的排序<br>8.6 将 map 的键值对调</li><li>第9章：包（package）<br>9.1 标准库概述<br>9.2 regexp 包<br>9.3 锁和 sync 包<br>9.4 精密计算和 big 包<br>9.5 自定义包和可见性<br>9.6 为自定义包使用 godoc<br>9.7 使用 go install 安装自定义包<br>9.8 自定义包的目录结构、go install 和 go test<br>9.9 通过 Git 打包和安装<br>9.10 Go 的外部包和项目<br>9.11 在 Go 程序中使用外部库</li><li>第10章：结构（struct）与方法（method）<br>10.1 结构体定义<br>10.2 使用工厂方法创建结构体实例<br>10.3 使用自定义包中的结构体<br>10.4 带标签的结构体<br>10.5 匿名字段和内嵌结构体<br>10.6 方法<br>10.7 类型的 String() 方法和格式化描述符<br>10.8 垃圾回收和 SetFinalizer</li><li>第11章：接口（interface）与反射（reflection）<br>11.1 接口是什么<br>11.2 接口嵌套接口<br>11.3 类型断言：如何检测和转换接口变量的类型<br>11.4 类型判断：type-switch<br>11.5 测试一个值是否实现了某个接口<br>11.6 使用方法集与接口<br>11.7 第一个例子：使用 Sorter 接口排序<br>11.8 第二个例子：读和写<br>11.9 空接口<br>11.10 反射包<br>11.11 Printf 和反射<br>11.12 接口与动态类型<br>11.13 总结：Go 中的面向对象<br>11.14 结构体、集合和高阶函数</li></ul><h4 id="第三部分：Go-高级编程"><a href="#第三部分：Go-高级编程" class="headerlink" title="第三部分：Go 高级编程"></a>第三部分：Go 高级编程</h4><ul><li>第12章：读写数据<br>12.1 读取用户的输入<br>12.2 文件读写<br>12.3 文件拷贝<br>12.4 从命令行读取参数<br>12.5 用 buffer 读取文件<br>12.6 用切片读写文件<br>12.7 用 defer 关闭文件<br>12.8 使用接口的实际例子：fmt.Fprintf<br>12.9 格式化 JSON 数据<br>12.10 XML 数据格式<br>12.11 用 Gob 传输数据<br>12.12 Go 中的密码学</li><li>第13章：错误处理与测试<br>13.1 错误处理<br>13.2 运行时异常和 panic<br>13.3 从 panic 中恢复（Recover）<br>13.4 自定义包中的错误处理和 panicking<br>13.5 一种用闭包处理错误的模式<br>13.6 启动外部命令和程序<br>13.7 Go 中的单元测试和基准测试<br>13.8 测试的具体例子<br>13.9 用（测试数据）表驱动测试<br>13.10 性能调试：分析并优化 Go 程序</li><li>第14章：协程（goroutine）与通道（channel）<br>14.1 并发、并行和协程<br>14.2 使用通道进行协程间通信<br>14.3 协程同步：关闭通道-对阻塞的通道进行测试<br>14.4 使用 select 切换协程<br>14.5 通道，超时和计时器（Ticker）<br>14.6 协程和恢复（recover）<br>14.7 新旧模型对比：任务和worker<br>14.8 惰性生成器的实现<br>14.9 实现 Futures 模式<br>14.10 复用<br>14.11 限制同时处理的请求数<br>14.12 链式协程<br>14.13 在多核心上并行计算<br>14.14 并行化大量数据的计算<br>14.15 漏桶算法<br>14.16 对Go协程进行基准测试<br>14.17 使用通道并发访问对象</li><li>第15章：网络、模版与网页应用<br>15.1 tcp服务器<br>15.2 一个简单的web服务器<br>15.3 访问并读取页面数据<br>15.4 写一个简单的网页应用<br>15.5 确保网页应用健壮<br>15.6 用模板编写网页应用<br>15.7 探索 template 包<br>15.8 精巧的多功能网页服务器<br>15.9 用 rpc 实现远程过程调用<br>15.10 基于网络的通道 netchan<br>15.11 与 websocket 通信<br>15.12 用 smtp 发送邮件</li></ul><h4 id="第四部分：实际应用"><a href="#第四部分：实际应用" class="headerlink" title="第四部分：实际应用"></a>第四部分：实际应用</h4><ul><li>第16章：常见的陷阱与错误<br>16.1 误用短声明导致变量覆盖<br>16.2 误用字符串<br>16.3 发生错误时使用defer关闭一个文件<br>16.4 何时使用new()和make()<br>16.5 不需要将一个指向切片的指针传递给函数<br>16.6 使用指针指向接口类型<br>16.7 使用值类型时误用指针<br>16.8 误用协程和通道<br>16.9 闭包和协程的使用<br>16.10 糟糕的错误处理</li><li>第17章：模式<br>17.1 逗号ok模式<br>17.2 defer 模式<br>17.3 可见性模式<br>17.4 运算符模式和接口</li><li>第18章：出于性能考虑的实用代码片段<br>18.1 字符串<br>18.2 数组和切片<br>18.3 映射<br>18.4 结构体<br>18.5 接口<br>18.6 函数<br>18.7 文件<br>18.8 协程（goroutine）与通道（channel）<br>18.9 网络和网页应用<br>18.10 其他<br>18.11 出于性能考虑的最佳实践和建议</li><li>第19章：构建一个完整的应用程序</li><li>第20章：Go 语言在 Google App Engine 的使用</li><li>第21章：实际部署案例</li></ul><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><ul><li>A 代码引用</li><li>B 有趣的 Go 引用</li><li>C 代码示例列表</li><li>D 书中的包引用</li><li>E 书中的工具引用</li><li>F 常见问题解答</li><li>G 习题答案</li><li>H 参考文献<br>索引</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;intor&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;第一部分：学习-Go-语言&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Go入门指南" scheme="http://192.168.0.107:4000/categories/Go%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>1.1 起源与发展</title>
    <link href="http://192.168.0.107:4000/wiki/Go%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/%E7%AC%AC%E4%B8%80%E7%AB%A0%20Go%E8%AF%AD%E8%A8%80%E7%9A%84%E8%B5%B7%E6%BA%90%EF%BC%8C%E5%8F%91%E5%B1%95%E4%B8%8E%E6%99%AE%E5%8F%8A/1.1%20%E8%B5%B7%E6%BA%90%E4%B8%8E%E5%8F%91%E5%B1%95/"/>
    <id>http://192.168.0.107:4000/wiki/Go入门指南/第一章 Go语言的起源，发展与普及/1.1 起源与发展/</id>
    <published>2020-03-21T14:30:00.000Z</published>
    <updated>2020-03-23T15:24:43.553Z</updated>
    
    <content type="html"><![CDATA[<p> 语言起源 2007 年，并于 2009 年正式对外发布。它从 2009 年 9 月 21 日开始作为谷歌公司 20% 兼职项目，即相关员工利用 20% 的空余时间来参与 Go 语言的研发工作。该项目的三位领导者均是著名的 IT 工程师：Robert Griesemer，参与开发 Java HotSpot 虚拟机；Rob Pike，Go 语言项目总负责人，贝尔实验室 Unix 团队成员，参与的项目包括 Plan 9，Inferno 操作系统和 Limbo 编程语言；Ken Thompson，贝尔实验室 Unix 团队成员，C 语言、Unix 和 Plan 9 的创始人之一，与 Rob Pike 共同开发了 UTF-8 字符集规范。自 2008 年 1 月起，Ken Thompson 就开始研发一款以 C 语言为目标结果的编译器来拓展 Go 语言的设计思想。</p><p><strong>这是一个由计算机领域 “发明之父” 所组成的黄金团队，他们对系统编程语言，操作系统和并行都有着非常深刻的见解</strong></p><p><img src="./1.1 起源与发展/1584944219087.png" alt="图 1.1 Go 语言设计者：Griesemer、Thompson 和 Pike"></p><p>在 2008 年年中，Go 语言的设计工作接近尾声，一些员工开始以全职工作状态投入到这个项目的编译器和运行实现上。Ian Lance Taylor 也加入到了开发团队中，并于 2008 年 5 月创建了一个 gcc 前端。</p><p>Russ Cox 加入开发团队后着手语言和类库方面的开发，也就是 Go 语言的标准包。在 2009 年 10 月 30 日，Rob Pike 以 Google Techtalk 的形式第一次向人们宣告了 Go 语言的存在。</p><p>直到 2009 年 11 月 10 日，开发团队将 Go 语言项目以 BSD-style 授权（完全开源）正式公布了 Linux 和 Mac OS X 平台上的版本。Hector Chu 于同年 11 月 22 日公布了 Windows 版本。</p><p>作为一个开源项目，Go 语言借助开源社区的有生力量达到快速地发展，并吸引更多的开发者来使用并改善它。自该开源项目发布以来，超过 200 名非谷歌员工的贡献者对 Go 语言核心部分提交了超过 1000 个修改建议。在过去的 18 个月里，又有 150 开发者贡献了新的核心代码。这俨然形成了世界上最大的开源团队，并使该项目跻身 Ohloh 前 2% 的行列。大约在 2011 年 4 月 10 日，谷歌开始抽调员工进入全职开发 Go 语言项目。开源化的语言显然能够让更多的开发者参与其中并加速它的发展速度。Andrew Gerrand 在 2010 年加入到开发团队中成为共同开发者与支持者。</p><p>在 Go 语言在 2010 年 1 月 8 日被 <a href="http://www.tiobe.com/" title="Tiobe" rel="external nofollow noopener noreferrer" target="_blank">Tiobe</a>（闻名于它的编程语言流行程度排名）宣布为 “2009 年年度语言” 后，引起各界很大的反响。目前 Go 语言在这项排名中的最高记录是在 2017 年 1 月创下的第13名，流行程度 2.325%。</p><h4 id="时间轴："><a href="#时间轴：" class="headerlink" title="时间轴："></a>时间轴：</h4><ul><li>2007 年 9 月 21 日：雏形设计</li><li>2009 年 11 月 10日：首次公开发布</li><li>2010 年 1 月 8 日：当选 2009 年年度语言</li><li>2010 年 5 月：谷歌投入使用</li><li>2011 年 5 月 5 日：Google App Engine 支持 Go 语言</li></ul><p>从 2010 年 5 月起，谷歌开始将 Go 语言投入到后端基础设施的实际开发中，例如开发用于管理后端复杂环境的项目。有句话叫 “吃你自己的狗食”，这也体现了谷歌确实想要投资这门语言，并认为它是有生产价值的。</p><p>Go 语言的官方网站是 <a href="http://golang.org/" title="golang.org" rel="external nofollow noopener noreferrer" target="_blank">golang.org</a>，这个站点采用 Python 作为前端，并且使用 Go 语言自带的工具 godoc 运行在 Google App Engine 上来作为 Web 服务器提供文本内容。在官网的首页有一个功能叫做 Go Playground，是一个 Go 代码的简单编辑器的沙盒，它可以在没有安装 Go 语言的情况下在你的浏览器中编译并运行 Go，它提供了一些示例，其中包括国际惯例 “Hello, World!”。</p><p>更多的信息详见 <a href="https://github.com/golang/go" title="github.com/golang/go， Go" rel="external nofollow noopener noreferrer" target="_blank">github.com/golang/go，Go</a> 项目 Bug 追踪和功能预期详见 <a href="https://github.com/golang/go/issues" title="github.com/golang/go/issues" rel="external nofollow noopener noreferrer" target="_blank">github.com/golang/go/issues</a>。</p><p>Go 通过以下的 Logo 来展示它的速度，并以囊地鼠（Gopher）作为它的吉祥物。</p><p><img src="1.1 起源与发展/1584944259426.png" alt="图1.2 Go 语言 Logo"></p><p>谷歌邮件列表 <a href="http://groups.google.com/group/golang-nuts/" title="golang-nuts" rel="external nofollow noopener noreferrer" target="_blank">golang-nuts</a> 非常活跃，每天的讨论和问题解答数以百计。</p><p>关于 Go 语言在 Google App Engine 的应用，这里有一个单独的邮件列表 <a href="https://groups.google.com/forum/#!forum/google-appengine-go" title="google-appengine-go" rel="external nofollow noopener noreferrer" target="_blank">google-appengine-go</a>，不过 2 个邮件列表的讨论内容并不是分得很清楚，都会涉及到相关的话题。<a href="http://go-lang.cat-v.org/" title="go-lang.cat-v.org/" rel="external nofollow noopener noreferrer" target="_blank">go-lang.cat-v.org/</a> 是 Go 语言开发社区的资源站，<a href="http://irc.freenode.net/" title="irc.freenode.net" rel="external nofollow noopener noreferrer" target="_blank">irc.freenode.net</a> 的#go-nuts 是官方的 Go IRC 频道。</p><p><a href="https://twitter.com/golang" title="@golang" rel="external nofollow noopener noreferrer" target="_blank">@golang</a> 是 Go 语言在 Twitter 的官方帐号，大家一般使用 #golang 作为话题标签。</p><p>这里还有一个在 Linked-in 的小组：<a href="http://www.linkedin.com/groups?gid=2524765&amp;trk=myg_ugrp_ovr" title="www.linkedin.com/groups?gid=2524765&amp;trk=myg_ugrp_ovr" rel="external nofollow noopener noreferrer" target="_blank">www.linkedin.com/groups?gid=2524765&amp;trk=myg_ugrp_ovr</a>。</p><p>Go 编程语言的维基百科：<a href="http://en.wikipedia.org/wiki/Go_(programming_language" rel="external nofollow noopener noreferrer" target="_blank">en.wikipedia.org/wiki/Go_(programming_language)</a> “en.wikipedia.org/wiki/Go_(programming_language)”)</p><p>Go 语言相关资源的搜索引擎页面：<a href="https://gowalker.org/" title="gowalker.org" rel="external nofollow noopener noreferrer" target="_blank">gowalker.org</a></p><p>Go 语言还有一个运行在 Google App Engine 上的 <a href="http://tour.golang.org/" title="Go Tour" rel="external nofollow noopener noreferrer" target="_blank">Go Tour</a>，你也可以通过执行命令 <code>go install go-tour.googlecode.com/hg/gotour</code> 安装到你的本地机器上。对于中文读者，可以访问该指南的 <a href="http://go-tour-zh.appspot.com/" title="中文版本" rel="external nofollow noopener noreferrer" target="_blank">中文版本</a>，或通过命令 <code>go install https://bitbucket.org/mikespook/go-tour-zh/gotour</code> 进行安装。</p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><ul><li><a href="go_catalog">目录</a></li><li>上一部分：<a href="go_intro">前言</a></li><li>下一节: <a href="go-1.2">语言的主要特性与发展的环境和影响因素</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 语言起源 2007 年，并于 2009 年正式对外发布。它从 2009 年 9 月 21 日开始作为谷歌公司 20% 兼职项目，即相关员工利用 20% 的空余时间来参与 Go 语言的研发工作。该项目的三位领导者均是著名的 IT 工程师：Robert Griesemer，参
      
    
    </summary>
    
      <category term="Go入门指南" scheme="http://192.168.0.107:4000/categories/Go%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    
      <category term="第一章 Go语言的起源，发展与普及" scheme="http://192.168.0.107:4000/categories/Go%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/%E7%AC%AC%E4%B8%80%E7%AB%A0-Go%E8%AF%AD%E8%A8%80%E7%9A%84%E8%B5%B7%E6%BA%90%EF%BC%8C%E5%8F%91%E5%B1%95%E4%B8%8E%E6%99%AE%E5%8F%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="http://192.168.0.107:4000/wiki/index/"/>
    <id>http://192.168.0.107:4000/wiki/index/</id>
    <published>2017-01-21T17:55:57.000Z</published>
    <updated>2020-03-23T05:24:53.060Z</updated>
    
    <content type="html"><![CDATA[<p>这是 zunpeng 的个人 Wiki 站点，主要记录一些自己总结的只言片语的零散知识点。</p><p>先后了解或尝试过 OneNote、Evernote、Blog、leanote、Mindoc 等方式，或多或少都感觉欠缺些什么，在网上看到<a href="用 Hexo 做个人 Wiki 知识管理系统">https://www.v2ex.com/t/347176?p=1</a>这篇文章后，感觉作者的wiki制作的很漂亮（简洁、明了），顿时眼前一亮，决定参考其github上的源码做一下，终于搞了两天搞了出来，本人的wiki并没有使用github，而是使用的个人搭建的gitbucket做为版本管理器。</p><p>其主要特点就是：</p><ul><li>界面简洁美观，排版字体友好</li><li>支持多级分类</li><li>方便修改和更新内容</li><li>部署简单</li><li>分类目录可展开和收缩</li><li>展开分类时可查看该分类下所有文章 / 词条的标题</li><li>每篇文章 / 词条能添加多个分类 / 标签</li><li>Wiki 可支持引用内部链接</li><li>使用 Markdown 书写文章 / 词条</li><li>支持全文搜索（可搜索内容和标题）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是 zunpeng 的个人 Wiki 站点，主要记录一些自己总结的只言片语的零散知识点。&lt;/p&gt;
&lt;p&gt;先后了解或尝试过 OneNote、Evernote、Blog、leanote、Mindoc 等方式，或多或少都感觉欠缺些什么，在网上看到&lt;a href=&quot;用 Hexo 
      
    
    </summary>
    
    
  </entry>
  
</feed>
